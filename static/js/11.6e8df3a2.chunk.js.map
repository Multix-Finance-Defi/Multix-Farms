{"version":3,"sources":["utils/callHelpers.ts","views/Home/components/CardValue2.tsx","utils/erc20.ts","hooks/useHarvest.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","refferal","localStorage","getItem","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","CardValue2","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","style","color","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","balance","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useBoosterHarvest","useBoosterContract","fetchBoosterUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","fastRefresh","useRefresh","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","backgroundImage","backgroundRepeat","lineHeight","padding","backgroundSize","CakeHarvestBalance","earningsSum","TranslateString","useI18n","CakeWalletBalance","cakeBalance","paddingTop","useTokenBalance","setBalance","ethereum","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","text","Actions","Head","mediaQueries","mm","Style","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","display","flexDirection","justifyContent","height","width","toFixed","alignItems","id","disabled","length","onClick","fullWidth","background","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","raPerBlock","size","mb","StyledTotalValueLockedCard","sm","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Cards","lg","BaseLayout","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/11.6e8df3a2.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  const refferal =localStorage.getItem('ref') !== 'null' ? localStorage.getItem('ref') : '0x0000000000000000000000000000000000000000'\n \n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),refferal)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0','0x0000000000000000000000000000000000000000')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue2: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}  style={{color:\"#FFFFFF\"}}  >\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue2\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, \n  updateUserBalance,\n  updateUserPendingReward,\n\n  fetchBoosterUserDataAsync\n\n\n  \n} from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useBoosterContract, useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\n\nexport const useBoosterHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useBoosterContract()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchBoosterUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMLX',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '20px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <div style={{color:\"#FABE41\",backgroundImage: \"url('/images/textBg1.png')\", backgroundRepeat:\"no-repeat\", lineHeight:\"1\", padding:\"10px\", backgroundSize:\"250px\"}}>\n     \n      <Text bold fontSize={fontSize} style={{color:\"#FFFFFF\", backgroundRepeat:\"no-repeat\", lineHeight:\"1\"}}>\n      {prefix}{countUp}\n    </Text>\n    </div>\n   \n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"failure\" style={{ lineHeight: '2px', padding:\"1rem 0 0 0\", fontSize:\"20px\", backgroundImage: \"url('/images/textBg1.png')\", backgroundRepeat:\"no-repeat\"}}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"failure\" style={{ lineHeight: '2px',paddingTop:\"1rem\", fontSize:\"20px\",backgroundImage: \"url('/images/textBg1.png')\", backgroundRepeat:\"no-repeat\"}}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"20px\"/>\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMLX',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, Text, Flex } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-repeat: no-repeat;\n min-height: 550px;\n  background-size:100% 100%;\n // padding:40px 0px;\n  background-image:url('/images/Block1.png');\n  background-color: !important;\n`\n\nconst Block = styled.div`\n//  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n // margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  // background:url('images/textBg2.png');\n  // padding:10px;\n  // font-size: 22px;\n  // font-weight:bold;\n  // background-repeat:no-repeat;\n`\n\nconst Actions = styled.div`\n  width: 80%;\n  \n`;\n\nconst Head = styled.div`\n ${({ theme }) => theme.mediaQueries.mm}{\n  padding: 1rem 1rem 0 0;\n  color:  ${({ theme }) => theme.colors.text};\n  font-size: 40px;\n }\n  padding: 2rem 1rem 0 0;\n  font-size: 30px;\n  color:  ${({ theme }) => theme.colors.text};\n  `;\n\nconst Style = styled.div`\n display: flex;\n flex-direction: column;\n align-items: center;\n// background: yellow;\n height: 20rem;  \n width: 100%;  \n justify-content: space-between;\n`;\n\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody style={{display:\"flex\",flexDirection:\"column\",justifyContent:\"space-between\",height:\"550px\"}}>\n      <Style>\n        <Head>\n          {TranslateString(542, 'Farms & Staking')}\n        </Head>\n        {/* <img src=\"/images/x.png\" alt=\"cake logo\"/>  */}\n        {/* <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" style={{width:\"200px\"}} /> */}\n        <Flex style={{width:\"85%\",display:\"flex\",justifyContent:\"space-between\"}}>\n          <Block>\n            <Label >{TranslateString(544, 'PRV to Harvest')}</Label>\n            <CakeHarvestBalance  earningsSum={earningsSum} />\n            <Text style={{color:\"#FFFFFF\",paddingTop:\"0.2rem\"}}>~${(eggPrice * earningsSum).toFixed(2)}</Text>\n          </Block>\n          <Block >\n            <Label >{TranslateString(546, 'PRV in Wallet')}</Label>\n            <CakeWalletBalance cakeBalance={cakeBalance} />\n            <Text style={{color:\"#FFFFFF\",paddingTop:\"0.2rem\"}}>~${(eggPrice * cakeBalance).toFixed(2)}</Text>\n          </Block>\n        </Flex>\n        </Style>\n        <div style={{display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\",height:\"6rem\"}}>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n              style={{ background: \"linear-gradient(180deg, #00ECEC 0%, #6E318E 77.6%, #6E318E 100%)\" }}\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n        </div>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue2 from './CardValue2'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  background-repeat: no-repeat;\n  background-size:100% 100%;\n  padding:30px 0px;\n  background-image:url('/images/Block3.png');\n  min-height: 580px;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n // margin-bottom: 8px;\n  padding-top: 1rem;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let raPerBlock = 0;\n  if(farms && farms[0] && farms[0].raPerBlock){\n    raPerBlock = new BigNumber(farms[0].raPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody style={{padding:\"20px 60px 0px 60px\"}}>\n        <Heading size=\"xl\" mb=\"24px\" /* style={{textAlign:\"center\"}} */ >\n          {TranslateString(534, 'PRV Stats')}\n        </Heading>\n        <div style={{paddingTop:\"60px\"}}>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue2 fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue2 fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue2 fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          <Text color=\"#FFFFFF\">{cakeSupply && <CardValue2 fontSize=\"14px\" value={cakeSupply} decimals={0} />} </Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\" style={{color:\"#FFFFFF\"}}>{raPerBlock}</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(541, 'Max Supply')}</Text>\n          <Text bold fontSize=\"14px\" style={{color:\"#FFFFFF\"}}>{raPerBlock}</Text>\n        </Row>\n        </div>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\nimport CardValue2 from './CardValue2'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  background-size:100% 100%;\n  padding: 80px 0px;\n // background-image:url('/images/16.png');\n  background-image:url('/images/Block4.png');\n  background-color: !important;\n  z-index: 1;\n  height: 430px;\n  ${({ theme }) => theme.mediaQueries.sm}{\n    padding-left: 0px;\n  }\n  padding-left: 20px;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody >\n        <Heading size=\"xl\" mb=\"24px\">\n        Total Value Locked (TVL)\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue2 value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text>Across All Farms & Pools</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  background-size:100% 100%;\n//  padding:40px 0px;\n//  background-image:url('/images/16.png');\n  background-image:url('/images/Block2.png');\n  background-color: !important;\n  min-height: 550px;\n`\n\nconst Row = styled.div`\n  // align-items: center;\n  // display: flex;\n  // font-size: 14px;\n  // justify-content: space-between;\n  // margin-bottom: 8px;\n`\nconst Head = styled.div`\n  ${({ theme }) => theme.mediaQueries.mm}{\n     font-size: 40px;\n     padding: 1.5rem 0 0 2rem;\n   }\n   font-size:  30px;\n   color: #00ECEC;\n   padding: 1.5rem 0 0 1rem;\n  `;\n\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Head>\n          Announcements\n        </Head>  \n        <div style={{paddingTop:\"25px\"}}>  \n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'dev'\n          }}\n          options={{\n            height: '320',\n            chrome: \"noheader, nofooter\",\n            width: \"100%\"\n          }}\n        />\n       </div>  \n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 50px;\n  text-align: center;\n  background-size:100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/leftMain.png');\n    background-position:  left center, right center;\n    height: 305px;\n    background-repeat:no-repeat;\n    background-size:400px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      {/* <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"card\" style={{fontSize:\"4em\"}}>\n          SafyHUB\n        </Heading>\n        <Text color=\"card\">{TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')}</Text>\n      </Hero> */}\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}