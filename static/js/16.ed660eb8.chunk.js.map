{"version":3,"sources":["views/Farms/components/Divider.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["styled","div","theme","colors","textSubtle","Wrapper","StyledLinkExternal","LinkExternal","text","primary","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","TranslateString","useI18n","liquidityUrlPathParts","getLiquidityUrlPathParts","justifyContent","href","process","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","variant","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","onClick","disabled","a","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","size","marginBottom","toString","Action","CardActions","farm","ethereum","account","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","getContract","onApprove","useApprove","handleApprove","console","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","cakePrice","apy","farmApy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","calculateCakeEarnedPerThousandDollars","numberOfDays","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","apyModalRoi","amountEarned","amountInvested","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","props","expanded","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","ExpandableSectionButton","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWallet","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","map","cakeRewardPerYear","eggPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/16.ed660eb8.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          MLX\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'MLX per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ;\n  background-size:100% 100%;\n  padding:50px 20px;\n  background-image:url('/images/16.png');\n  background-color: !important;\n  border-radius: 0px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'MLX'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'MLX' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"text\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens to earn MLX')\n            :\n          TranslateString(320, 'Stake LP tokens to earn MLX')\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"text\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback MLX')}\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}